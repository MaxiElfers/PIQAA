# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\workspace\python_in_qgis_arcgis\PIQAA\exercise_8\muenster_city_district_tool\exportDataDialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from qgis.PyQt.QtWidgets import QMessageBox
from PyQt5.QtWidgets import QFileDialog
from .selectedFeatureInfoClass import DistrictInfo
from .pdfPrinting import PDFprint
import csv

class Ui_Dialog_export(object):

    window = None

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(554, 457)
        self.exportBox = QtWidgets.QGroupBox(Dialog)
        self.exportBox.setGeometry(QtCore.QRect(20, 20, 521, 421))
        self.exportBox.setObjectName("exportBox")
        self.btnPDF = QtWidgets.QPushButton(self.exportBox)
        self.btnPDF.setGeometry(QtCore.QRect(10, 30, 271, 61))
        self.btnPDF.setObjectName("btnPDF")
        self.label = QtWidgets.QLabel(self.exportBox)
        self.label.setGeometry(QtCore.QRect(20, 100, 491, 51))
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.btnCSV = QtWidgets.QPushButton(self.exportBox)
        self.btnCSV.setGeometry(QtCore.QRect(12, 191, 271, 61))
        self.btnCSV.setObjectName("btnCSV")
        self.label_2 = QtWidgets.QLabel(self.exportBox)
        self.label_2.setGeometry(QtCore.QRect(20, 260, 481, 31))
        self.label_2.setWordWrap(True)
        self.label_2.setObjectName("label_2")
        self.btnOK = QtWidgets.QPushButton(self.exportBox)
        self.btnOK.setGeometry(QtCore.QRect(120, 350, 261, 41))
        self.btnOK.setObjectName("btnOK")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        # Add close functionality to the OK button
        self.btnPDF.clicked.connect(self.exportPDF)
        self.btnCSV.clicked.connect(self.exportCSV)

        # Add close functionality to the OK button
        self.btnOK.clicked.connect(Dialog.close)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.exportBox.setTitle(_translate("Dialog", "Export in Datei"))
        self.btnPDF.setText(_translate("Dialog", "Export als *.pdf"))
        self.label.setText(_translate("Dialog", "Die Werte des selektieren Features werden in einen *.pdf-Steckbrief geschrieben. Bitte geben Sie hierzu noch einen Ausgabepfad an. Bitte beachten Sie,  dass nur ein Feature ausgew√§hlt ist."))
        self.btnCSV.setText(_translate("Dialog", "Export als *.csv"))
        self.label_2.setText(_translate("Dialog", "Die Werte der selektierten Feature werden in eine *.csv exportiert. Bitte geben Sie hirzu noch einen Ausgabepfad an."))
        self.btnOK.setText(_translate("Dialog", "OK"))

    # Functionality for the export PDF button
    def exportPDF(self):
        dInfo = DistrictInfo()
        selected_features = dInfo.getSelectedCityDistrict() # get selected features
        if dInfo.checkFeatureCount(selected_features, self.window): # check if only one feature is selected
            directory = QFileDialog.getExistingDirectory(None, 'Select a folder:', 'C:\\', QFileDialog.ShowDirsOnly) # let the user input a directory
            information_array = self.createInformationArray(selected_features[0], dInfo) # create the array with the information about the selected feature
            print = PDFprint() # create a new PDFprint object
            print.setData(information_array) # set the data for the PDF
            print.createPDF(selected_features[0], (directory + "/district_profile.pdf")) # create the PDF

    # Functionality for the export CSV button
    def exportCSV(self):
        dInfo = DistrictInfo()
        selected_features = dInfo.getSelectedCityDistrict() # get selected features
        directory = QFileDialog.getExistingDirectory(None, 'Select a folder:', 'C:\\', QFileDialog.ShowDirsOnly) # let the user input a directory
        with open(directory + "/selected_features.csv", 'w', newline='') as csvfile: # start the creation of the CSV file
            fieldnames = ['Name', 'P_District', 'Area', 'Households', 'Parcels', 'Schools', 'Pools'] # set the headers
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames) # create the writer

            writer.writeheader() 
            for feature in selected_features: # iterate over the selected features
                information_array = self.createInformationArray(feature, dInfo) # create the array with the information about the selected feature
                writer.writerow({ # fill the rows of the CSV
                    'Name': information_array[0],
                    'P_District': information_array[1],
                    'Area': information_array[2],
                    'Households': information_array[3],
                    'Parcels': information_array[4],
                    'Schools': information_array[5][0],
                    'Pools': information_array[6][0]
                })

    def createInformationArray(self, district, dInfo):
        # Create an array with the information
        # This is done with the help of the DistrictInfo class
        return [district['Name'], 
                district['P_District'], 
                dInfo.getDistrictArea(district), 
                dInfo.getHousholdsInDistrict(district), 
                dInfo.getParcelsInDistrict(district), 
                dInfo.getSchoolsInDistrict(district, 0), 
                dInfo.getPoolsInDistrict(district, 1)]